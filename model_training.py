# -*- coding: utf-8 -*-
"""Social_Media_Followers_Prediction_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cx6DMqwTN6xhndhrFmVor0Ug1hPY92Df

##**Uploading Dataset**
"""

from google.colab import files
uploaded = files.upload()

"""##**Importing Libraries**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

import joblib

"""##**Load and view Dataset**"""

df=pd.read_csv('/content/top_insta_influencers_data.csv')
df

"""##**converting the data**

These are shorthand notations for:
K ‚Üí thousands ‚Üí e3
M ‚Üí millions ‚Üí e6
B/b ‚Üí billions ‚Üí e9
"""

def convert_to_number(x):
    if isinstance(x, str):
        x = x.replace(',', '')  # remove commas like "1,000"
        x = x.strip().lower()    # remove spaces and lowercase
        x = x.replace('k', 'e3').replace('m', 'e6').replace('b', 'e9')
    try:
        return float(eval(x))
    except:
        return np.nan
cols_to_clean = ['followers', 'avg_likes', 'new_post_avg_like', 'total_likes', 'posts']
for col in cols_to_clean:
    df[col] = df[col].apply(convert_to_number)

df

df['60_day_eng_rate'] = df['60_day_eng_rate'].str.replace('%', '').astype(float)

df.info()

"""##**Performing EDA**"""

df.isnull().sum().sum()

col_list=list(df.columns)
print(col_list)

for x in col_list:
  if df[x].dtypes=='object':
    df[x].fillna(df[x].mode()[0],inplace=True)
  else:
    df[x].fillna(df[x].mean(),inplace=True)

df.isnull().sum().sum()

df.duplicated().sum()

"""##**Feature Selection**"""

X = df[['avg_likes', 'new_post_avg_like', 'posts', '60_day_eng_rate']]
y = df['followers']

X

y

"""##**Train-Test split**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""##**Training the RandomForestRegressor**"""

from sklearn.ensemble import RandomForestRegressor

# Initialize and train the model
model = RandomForestRegressor(
    n_estimators=200,
    max_depth=10,
    random_state=42
)
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Evaluating
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"R¬≤ Score: {r2:.2f}")

"""##**K-Means Clustering**"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
df['cluster'] = kmeans.fit_predict(X_scaled)

# Optional: Label clusters based on avg followers per group
cluster_avg = df.groupby('cluster')['followers'].mean().sort_values(ascending=False)
label_map = {cluster_avg.index[0]: 'High-Level Influencer',
             cluster_avg.index[1]: 'Mid-Level Influencer',
             cluster_avg.index[2]: 'Low-Level Influencer'}

df['cluster_label'] = df['cluster'].map(label_map)

"""##**Building Predicting Model**"""

print("\nüìä Enter your social media statistics below:")

avg_likes = float(input("1Ô∏è‚É£ Average likes per post: "))
new_post_avg_like = float(input("2Ô∏è‚É£ Average likes on your latest posts: "))
posts = int(input("3Ô∏è‚É£ Total number of posts: "))

print("\nüìà Let's calculate your 60-Day Engagement Rate automatically:")

total_engagements = float(input("4Ô∏è‚É£ Enter total engagements (likes + comments) in last 60 days: "))
followers_last_60 = int(input("5Ô∏è‚É£ Enter your current followers count: "))
posts_last_60 = int(input("6Ô∏è‚É£ How many posts in the last 60 days? "))

# ‚úÖ Calculate engagement rate
eng_rate = (total_engagements / (followers_last_60 * posts_last_60)) * 100
eng_rate = round(eng_rate, 2)

print(f"\n‚úÖ Your estimated 60-Day Engagement Rate is: {eng_rate}%")


input_data = pd.DataFrame([[avg_likes, new_post_avg_like, posts, eng_rate]],
                          columns=['avg_likes', 'new_post_avg_like', 'posts', '60_day_eng_rate'])


# Predict followers
predicted_followers = model.predict(input_data)[0]

# Predict cluster
input_scaled = scaler.transform(input_data)
cluster_label = kmeans.predict(input_scaled)[0]
cluster_name = label_map.get(cluster_label, f"Group {cluster_label}")

print("\nüìà Prediction Results:")
print(f"‚Üí Predicted Number of Followers: {int(predicted_followers)}")
print(f"‚Üí You are a: {cluster_name}")

"""##**Saving Model**"""

with open("regression_model.pkl", "wb") as f:
    pickle.dump(model, f)

with open("scaler.pkl", "wb") as f:
    pickle.dump(scaler, f)

with open("kmeans_model.pkl", "wb") as f:
    pickle.dump(kmeans, f)

with open("label_map.pkl", "wb") as f:
    pickle.dump(label_map, f)